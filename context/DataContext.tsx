import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';
import { Service, ServiceRequest, Comment, UserStub } from '../types';

// --- MOCK INITIAL DATA ---
const initialServices: Service[] = [
  { 
    id: 1, 
    title: '‡∏™‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå', 
    category: '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤', 
    duration: 2, 
    unit: '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
    imageUrl: 'https://images.unsplash.com/photo-1542831371-29b0f74f9713?q=80&w=2970&auto=format&fit=crop',
    user: { id: 201, name: '‡∏ß‡∏¥‡∏ä‡∏≤‡∏ç ‡∏™‡∏≠‡∏ô‡∏î‡∏µ', avatarUrl: 'https://i.pravatar.cc/150?img=4' }
  },
  { 
    id: 2, 
    title: '‡∏ã‡πà‡∏≠‡∏°‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå‡πÄ‡∏•‡πá‡∏Å', 
    category: '‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á', 
    duration: 1, 
    unit: '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
    imageUrl: 'https://images.unsplash.com/photo-1582213524330-8c8f3a8b2776?q=80&w=2970&auto=format&fit=crop',
    user: { id: 202, name: '‡∏ä‡∏≥‡∏ô‡∏≤‡∏ç ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≤‡∏á', avatarUrl: 'https://i.pravatar.cc/150?img=5' }
  },
];

const initialRequests: ServiceRequest[] = [
    { 
        id: 1, 
        title: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏', 
        category: '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', 
        description: '‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Line ‡πÅ‡∏•‡∏∞ Facebook ‡∏Ç‡∏±‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÜ ‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö', 
        user: { id: 203, name: '‡πÄ‡∏≠‡∏Å‡∏û‡∏•', avatarUrl: 'https://i.pravatar.cc/150?img=9' }, 
        comments: [{id: 1, text: "‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏™‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏ö‡πà‡∏≠‡∏¢‡πÜ", user: {id: 204, name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", avatarUrl: 'https://i.pravatar.cc/150?img=11'}}], 
        reactions: {'üëç': 5, '‚ù§Ô∏è': 2},
        duration: 2,
        unit: '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
        status: 'open',
        applicants: [{id: 204, name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", avatarUrl: 'https://i.pravatar.cc/150?img=11'}],
        selectedProvider: null
    },
    { 
        id: 2, 
        title: '‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', 
        category: '‡∏á‡∏≤‡∏ô‡∏ö‡πâ‡∏≤‡∏ô', 
        description: '‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÅ‡∏ñ‡∏ß‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö', 
        user: { id: 205, name: '‡∏ô‡πâ‡∏≥‡∏ù‡∏ô', avatarUrl: 'https://i.pravatar.cc/150?img=10' }, 
        comments: [], 
        reactions: {'üëç': 8},
        duration: 2,
        unit: '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
        status: 'open',
        applicants: [],
        selectedProvider: null
    },
];

interface DataContextType {
  services: Service[];
  requests: ServiceRequest[];
  addService: (service: Omit<Service, 'id'>) => void;
  addRequest: (request: Omit<ServiceRequest, 'id' | 'comments' | 'reactions' | 'status' | 'applicants' | 'selectedProvider'>) => void;
  addCommentToRequest: (requestId: number, comment: Omit<Comment, 'id'>) => void;
  addReactionToRequest: (requestId: number, emoji: string) => void;
  applyToRequest: (requestId: number, applicant: UserStub) => void;
  selectProvider: (requestId: number, provider: UserStub) => void;
  completeRequest: (requestId: number) => void;
}

const DataContext = createContext<DataContextType | undefined>(undefined);

export const DataProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [services, setServices] = useState<Service[]>(() => {
    const saved = localStorage.getItem('timebank-services');
    return saved ? JSON.parse(saved) : initialServices;
  });

  const [requests, setRequests] = useState<ServiceRequest[]>(() => {
    const saved = localStorage.getItem('timebank-requests');
    return saved ? JSON.parse(saved) : initialRequests;
  });

  useEffect(() => {
    localStorage.setItem('timebank-services', JSON.stringify(services));
  }, [services]);

  useEffect(() => {
    localStorage.setItem('timebank-requests', JSON.stringify(requests));
  }, [requests]);

  const addService = (service: Omit<Service, 'id'>) => {
    const newService: Service = { ...service, id: Date.now() };
    setServices(prev => [newService, ...prev]);
  };

  const addRequest = (request: Omit<ServiceRequest, 'id' | 'comments' | 'reactions'| 'status' | 'applicants' | 'selectedProvider'>) => {
    const newRequest: ServiceRequest = {
        ...request, 
        id: Date.now(), 
        comments: [], 
        reactions: {},
        status: 'open',
        applicants: [],
        selectedProvider: null,
    };
    setRequests(prev => [newRequest, ...prev]);
  };
  
  const addCommentToRequest = (requestId: number, comment: Omit<Comment, 'id'>) => {
      const newComment: Comment = { ...comment, id: Date.now() };
      setRequests(prev => prev.map(req => 
          req.id === requestId 
          ? { ...req, comments: [newComment, ...req.comments] }
          : req
      ));
  };

  const addReactionToRequest = (requestId: number, emoji: string) => {
      setRequests(prev => prev.map(req => {
          if (req.id !== requestId) return req;
          const newReactions = { ...req.reactions };
          newReactions[emoji] = (newReactions[emoji] || 0) + 1;
          return { ...req, reactions: newReactions };
      }));
  };

  const applyToRequest = (requestId: number, applicant: UserStub) => {
      setRequests(prev => prev.map(req => 
          req.id === requestId && !req.applicants.some(a => a.id === applicant.id)
          ? { ...req, applicants: [...req.applicants, applicant] }
          : req
      ));
  };

  const selectProvider = (requestId: number, provider: UserStub) => {
      setRequests(prev => prev.map(req => 
          req.id === requestId
          ? { ...req, selectedProvider: provider, status: 'in_progress' }
          : req
      ));
  };
  
  const completeRequest = (requestId: number) => {
      setRequests(prev => prev.map(req => 
          req.id === requestId
          ? { ...req, status: 'completed' }
          : req
      ));
  };

  return (
    <DataContext.Provider value={{ services, requests, addService, addRequest, addCommentToRequest, addReactionToRequest, applyToRequest, selectProvider, completeRequest }}>
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => {
  const context = useContext(DataContext);
  if (context === undefined) {
    throw new Error('useData must be used within a DataProvider');
  }
  return context;
};